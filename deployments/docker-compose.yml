services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic functions --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  postgres:
    build:
      context: ..
      dockerfile: deployments/postgres/Dockerfile
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: godex
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d godex"]
      interval: 10s
      timeout: 5s
      retries: 5

  init-postgres:
    image: postgres:13-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGPASSWORD: admin
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      echo 'Postgres is up - executing initialization script'
      psql -h postgres -U admin -d godex -f /scripts/init-db.sql
      "
    volumes:
      - ../scripts:/scripts

  parser:
    build:
      context: ..
      dockerfile: deployments/go/Dockerfile
      args:
        SERVICE_NAME: parser
        SERVICE_PORT: 5000
    ports:
      - "5000:5000"
    environment:
      - KAFKA_BROKER_SERV=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    init: true

  container:
    build:
      context: ..
      dockerfile: deployments/go/Dockerfile
      args:
        SERVICE_NAME: container
        SERVICE_PORT: 5001
    ports:
      - "5001:5001"
    environment:
      - KAFKA_BROKER_SERV=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    init: true

  entrypoint:
    build:
      context: ..
      dockerfile: deployments/go/Dockerfile
      args:
        SERVICE_NAME: entrypoint
        SERVICE_PORT: 8080
    ports:
      - "8080:8080"
    init: true

volumes:
  postgres-data: